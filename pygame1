import pygame
import random

# Inicializar pygame
pygame.init()

# Configurações da tela
WIDTH, HEIGHT = 800, 400
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Jogo estilo Dino com Sprites")

# Cores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Relógio
clock = pygame.time.Clock()
FPS = 60

# Fonte
font = pygame.font.SysFont(None, 36)

# Carregar imagens
boneco_img = pygame.image.load('boneco.png.png').convert_alpha()
boneco_img = pygame.transform.scale(boneco_img, (40, 40))

cacto_img = pygame.image.load('cacto.png').convert_alpha()
cacto_img = pygame.transform.scale(cacto_img, (30, 50))

passaro_img = pygame.image.load('passaro.png').convert_alpha()
passaro_img = pygame.transform.scale(passaro_img, (30, 30))

moeda_ouro_img = pygame.image.load('moeda_ouro.png').convert_alpha()
moeda_ouro_img = pygame.transform.scale(moeda_ouro_img, (20, 20))

moeda_prata_img = pygame.image.load('moeda_prata.png').convert_alpha()
moeda_prata_img = pygame.transform.scale(moeda_prata_img, (20, 20))

# Boneco
player = pygame.Rect(100, HEIGHT - 60, 40, 40)
player_jump = -15
gravity = 1
vel_y = 0
on_ground = True
is_jumping = False

# Moedas
class Coin:
    def __init__(self, x, y, value, speed):
        self.rect = pygame.Rect(x, y, 20, 20)
        self.value = value
        self.speed = speed

coins = []

# Obstáculos
class Obstacle:
    def __init__(self, x, y, width, height, speed, is_bird=False):
        self.rect = pygame.Rect(x, y, width, height)
        self.speed = speed
        self.is_bird = is_bird

obstacles = []

# Temporizadores
obstacle_timer = 0
coin_timer = 0
OBSTACLE_INTERVAL = 1500
COIN_INTERVAL = 2000

# Pontuação e distância
score = 0
distance = 0
high_score = 0
speed = 5
speed_increase_distance = 100
next_speed_increase = speed_increase_distance

# Sistema de vidas
lives = 3

# Estados do jogo
game_over = False
game_started = False

# Loop principal
running = True
while running:
    dt = clock.tick(FPS)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    keys = pygame.key.get_pressed()

    # Tela inicial
    if not game_started:
        screen.fill(WHITE)
        title = font.render("Pressione ENTER para começar", True, BLACK)
        screen.blit(title, (WIDTH // 2 - title.get_width() // 2, HEIGHT // 2))
        pygame.display.flip()

        if keys[pygame.K_RETURN]:
            game_started = True
        continue

    if not game_over:
        distance += speed * dt / 1000
        obstacle_timer += dt
        coin_timer += dt

        # Pular
        if keys[pygame.K_SPACE] and on_ground:
            vel_y = player_jump
            on_ground = False
            is_jumping = True

        # Gravidade
        vel_y += gravity
        player.y += vel_y

        # Chão
        if player.y >= HEIGHT - 60:
            player.y = HEIGHT - 60
            vel_y = 0
            on_ground = True
            is_jumping = False

        # Criar obstáculos
        if obstacle_timer > OBSTACLE_INTERVAL:
            obstacle_timer = 0
            if random.random() < 0.7:
                height = random.randint(20, 50)
                new_obstacle = Obstacle(WIDTH, HEIGHT - 60, 20, height, speed)
            else:
                y = random.choice([HEIGHT - 150, HEIGHT - 200])
                new_obstacle = Obstacle(WIDTH, y, 30, 20, speed + 1, is_bird=True)
            obstacles.append(new_obstacle)

        # Criar moedas
        if coin_timer > COIN_INTERVAL:
            coin_timer = 0
            y = random.randint(HEIGHT - 150, HEIGHT - 80)
            if random.choice([True, False]):
                value = 5
            else:
                value = 1
            new_coin = Coin(WIDTH, y, value, speed)
            coins.append(new_coin)

        # Atualizar obstáculos
        for obs in obstacles[:]:
            obs.rect.x -= obs.speed
            if obs.rect.right < 0:
                obstacles.remove(obs)
            if player.colliderect(obs.rect):
                lives -= 1
                obstacles.remove(obs)
                if lives <= 0:
                    game_over = True
                    if distance > high_score:
                        high_score = distance

        # Atualizar moedas
        for coin in coins[:]:
            coin.rect.x -= coin.speed
            if coin.rect.right < 0:
                coins.remove(coin)
            if player.colliderect(coin.rect):
                score += coin.value
                coins.remove(coin)

        # Aumentar velocidade
        if distance >= next_speed_increase:
            speed += 0.5
            next_speed_increase += speed_increase_distance

    # Desenho
    screen.fill(WHITE)

    # Boneco
    screen.blit(boneco_img, (player.x, player.y))

    # Moedas
    for coin in coins:
        if coin.value == 5:
            screen.blit(moeda_ouro_img, (coin.rect.x, coin.rect.y))
        else:
            screen.blit(moeda_prata_img, (coin.rect.x, coin.rect.y))

    # Obstáculos
    for obs in obstacles:
        if obs.is_bird:
            screen.blit(passaro_img, (obs.rect.x, obs.rect.y))
        else:
            screen.blit(cacto_img, (obs.rect.x, obs.rect.y))

    # Pontuação
    score_text = font.render(f"Moedas: {score}", True, BLACK)
    screen.blit(score_text, (10, 10))

    dist_text = font.render(f"Distância: {int(distance)} m", True, BLACK)
    screen.blit(dist_text, (WIDTH - 250, 10))

    record_text = font.render(f"Recorde: {int(high_score)} m", True, BLACK)
    screen.blit(record_text, (WIDTH - 250, 40))

    # Vidas
    lives_text = font.render(f"Vidas: {lives}", True, BLACK)
    screen.blit(lives_text, (10, 40))

    if game_over:
        over_text = font.render("GAME OVER - pressione R", True, (255, 0, 0))
        screen.blit(over_text, (WIDTH // 2 - over_text.get_width() // 2, HEIGHT // 2))

        if keys[pygame.K_r]:
            game_over = False
            player.y = HEIGHT - 60
            vel_y = 0
            on_ground = True
            is_jumping = False
            obstacles.clear()
            coins.clear()
            score = 0
            distance = 0
            speed = 5
            next_speed_increase = speed_increase_distance
            lives = 3

    pygame.display.flip()

pygame.quit()
